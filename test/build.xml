<project name="MyProject" default="runTests" basedir=".">
    <description>
        ANT version of jstestdriver-phantomjs server.js.
        Created for cross-platform compatibility.

        ant-contrib required for 'if' tasks.

        Differences between this and server.js:
        - Output of executables isn't pushed to (.out, .err) files,
        because in ANT if you execute something and set
        spawn to true, then you can't capture the output.
        Fortunately, it won't show up in the console when you
        run the script either.
        - Unfortunately, there's no ant 'kill' task,
        so OS-sniffing has to be done.
    </description>

    <property name="rootDir" value="${basedir}"/>
    <property name="jsTestDriverVersion" value="1.3.4.b"/>
    <property name="jsTestDriverJar" value="coverage-${jsTestDriverVersion}.jar"/>
    <property name="jsTestDriverCoverageJar" value="JsTestDriver-${jsTestDriverVersion}.jar"/>
    <property name="antContribJar" value="ant-contrib-0.3.jar"/>

    <target name="start">
        <antcall target="downloadJsTestDriverJarsIfTheyDontExist"/>

        <antcall target="adjustPermissions"/>

        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${rootDir}/${antContribJar}"/>
            </classpath>
        </taskdef>


        <antcall target="startJsTestDriverServer"/>
        <antcall target="startPhantomJS"/>
    </target>

    <target name="stop">
        <antcall target="detectOs"/>
        <antcall target="stopJsTestDriverServer"/>
        <antcall target="stopPhantomJS"/>
    </target>

    <target name="startJsTestDriverServer" depends="downloadJsTestDriverJar, downloadJsTestDriverCoverageJar">
        <echo>Starting JsTestDriver server...</echo>
        <java
                jar="${rootDir}/${jsTestDriverJar}"
                fork="true"
                spawn="true">
            <arg value="--port"/>
            <arg value="9876"/>
        </java>

        <!-- Capturing JsTestDriver process ID -->
        <echo file="${rootDir}/jstd.pid">${env.$!}</echo>
    </target>

    <target name="stopJsTestDriverServer">
        <echo>Killing JsTestDriver server...</echo>

        <loadfile property="jsTestDriverServerProcessID"
                  srcFile="${rootDir}/jstd.pid"/>

        <if>
            <equals arg1="${isLinux}" arg2="true" />
            <then>
                <exec executable="kill">
                    <arg value="${jsTestDriverServerProcessID}"/>
                </exec>
            </then>
            <elseif>
                <equals arg1="${isWindows}" arg2="true" />
                <then>
                    <exec executable="taskkill">
                        <arg value="/PID"/>
                        <arg value="${jsTestDriverServerProcessID}"/>
                    </exec>
                </then>
            </elseif>
        </if>

        <delete file="${rootDir}/jstd.pid" verbose="true"/>
    </target>

    <target name="startPhantomJS">
        <echo>Starting PhantomJS...</echo>
        <exec
                executable="phantomjs"
                spawn="true">

            <arg value="${rootDir}/phantomjs-jstd.js"/>
        </exec>

        <!-- Capturing PhantomJS process ID -->
        <echo file="${rootDir}/phantomjs.pid">${env.$!}</echo>

    </target>

    <target name="stopPhantomJS">
        <echo>Killing PhantomJS...</echo>

        <loadfile property="phantomJSProcessID"
                  srcFile="${rootDir}/phantomjs.pid"/>

        <if>
            <equals arg1="${isLinux}" arg2="true" />
            <then>
                <exec executable="kill">
                    <arg value="${phantomJSProcessID}"/>
                </exec>
            </then>
            <elseif>
                <equals arg1="${isWindows}" arg2="true" />
                <then>
                    <exec executable="taskkill">
                        <arg value="/PID"/>
                        <arg value="${phantomJSProcessID}"/>
                    </exec>
                </then>
            </elseif>
        </if>

        <delete file="${rootDir}/phantomjs.pid" verbose="true"/>
    </target>

    <target name="runTests">
        <antcall target="start"/>

        <echo>Starting tests...</echo>
        <java
                jar="${rootDir}/${jsTestDriverJar}"
                fork="true"
                spawn="true">
            <arg value="--tests"/>
            <arg value="all"/>
            <arg value="--config"/>
            <arg value="${rootDir}/config/jsTestDriver.conf"/>
            <arg value="--testOutput"/>
            <arg value="results"/>
        </java>

        <antcall target="stop"/>
    </target>

    <target name="downloadJsTestDriverJarsIfTheyDontExist">
        <!-- check if required JsTestDriver JARs exist and download them if they don't -->
        <antcall target="checkJarExistence"/>
        <antcall target="downloadJsTestDriverJar"/>
        <antcall target="downloadJsTestDriverCoverageJar"/>
    </target>

    <target name="adjustPermissions">
        <chmod file="${rootDir}/${${antContribJar}}" perm="777"/>
        <chmod file="${rootDir}/${jsTestDriverJar}" perm="777"/>
        <chmod file="${rootDir}/${jsTestDriverCoverageJar}" perm="777"/>
    </target>

    <target name="detectOs">
        <condition property="isWindows">
            <os family="windows" />
        </condition>

        <condition property="isLinux">
            <os family="unix" />
        </condition>
    </target>

    <target name="checkJarExistence">
        <available file="${rootDir}/${jsTestDriverJar}" property="jsTestDriverJarExists"/>
        <available file="${rootDir}/${jsTestDriverCoverageJar}" property="jsTestDriverCoverageJarExists"/>
    </target>

    <target name="downloadJsTestDriverJar" depends="checkJarExistence" unless="jsTestDriverJarExists">
        <echo>Downloading JsTestDriver jar...</echo>
        <get src="http://js-test-driver.googlecode.com/files/${jsTestDriverJar}" dest="${rootDir}/${jsTestDriverJar}"/>
    </target>

    <target name="downloadJsTestDriverCoverageJar" depends="checkJarExistence" unless="jsTestDriverCoverageJarExists">
        <echo>Downloading JsTestDriver coverage jar...</echo>
        <get src="http://js-test-driver.googlecode.com/files/${jsTestDriverCoverageJar}" dest="${rootDir}/${jsTestDriverCoverageJar}"/>
    </target>


</project>